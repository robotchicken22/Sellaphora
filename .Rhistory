library(ggplot2)
summary(stud1018)
Concern <- table(stud1018$Concern1, stud1018$NightsDrink)
Concern
library(knitr)
library(kableExtra)
kable(Concern) %>% kable_styling(bootstrap_options = c("striped", "hover")) %>% column_spec(1, bold = T, border_right= T) %>% column_spec(2:8,)
nicetext <- element_text(face="italic", colour= "#AB8A8A", size= 12, family= "mono")
bigtext <- element_text(face="bold", colour="#697093", size= 18, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
nicetext <- element_text(face="italic", colour= "#AB8A8A", size= 10, family= "mono")
bigtext <- element_text(face="bold", colour="#697093", size= 14, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
bigtext <- element_text(face="bold", colour="#697093", size= 12, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
nicetext <- element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono")
bigtext <- element_text(face="bold", colour="#697093", size= 10, family= "serif")
bigtext <- element_text(face="bold", colour="#697093", size= 10, family= "serif", angle=45)
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
nicetext <- element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono", angle=45)
bigtext <- element_text(face="bold", colour="#697093", size= 10, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
bigtext <- element_text(face="bold", colour="#697093", size= 10, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
nicetext <- element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono")
bigtext <- element_text(face="bold", colour="#697093", size= 10, family= "serif")
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= bigtext)
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= element_text(face="bold", colour="#697093", size= 18, family= "serif"))
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= nicetext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= element_text(face="bold", colour="#697093", size= 8, family= "serif"))
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= nicetext) + theme(axis.text.y= element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono", angle=45)) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= element_text(face="bold", colour="#697093", size= 8, family= "serif"))
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono", angle= 45)) + theme(axis.text.y= element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono")) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= element_text(face="bold", colour="#697093", size= 8, family= "serif"))
ggplot(stud1018, aes(x=VoteGE, fill=Newspaper)) + geom_bar() + xlab("Political Party That Students Would Vote For") + ylab("Frequency") + theme(axis.text.x= element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono", angle= 90)) + theme(axis.text.y= element_text(face="italic", colour= "#AB8A8A", size= 8, family= "mono")) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(legend.text= nicetext) + theme(legend.title= bigtext) + theme(panel.background = element_rect(colour="#DFDF57", fill= "#DCDCCC")) + theme(plot.background= element_rect(fill="#E4F5AE")) + ggtitle("Political Parties Students Support and the Newspapers they Read") + theme(title= element_text(face="bold", colour="#697093", size= 8, family= "serif"))
ggplot(stud1018, aes(x=Degree, y=Height, fill= Degree)) + geom_boxplot() + theme(axis.text.x= element_text(colour="black", size= 12, angle= 90, face= "bold")) + theme(axis.text.y= element_text(colour="black", size= 12, face= "bold")) + theme(axis.title.x= element_text(size= 20, face="bold", colour="violet")) + theme(axis.title.y= element_text(size= 20, face="bold", colour="violet")) + theme(panel.background= element_rect(fill= "#D8A3F4")) + theme(plot.background = element_rect(fill= "#7B94CD")) + theme(legend.background =element_rect(fill ="#D8A3F4"))
ggplot(stud1018, aes(x=Degree, y=Height, fill= Degree)) + geom_boxplot() + theme(axis.text.x= element_text(colour="black", size= 12, angle= 90, face= "bold")) + theme(axis.text.y= element_text(colour="black", size= 12, face= "bold")) + theme(axis.title.x= element_text(size= 20, face="bold", colour="violet")) + theme(axis.title.y= element_text(size= 20, face="bold", colour="violet")) + theme(panel.background= element_rect(fill= "#D8A3F4")) + theme(plot.background = element_rect(fill= "#7B94CD")) + theme(legend.background =element_rect(fill ="#D8A3F4"))
ggplot(stud1018, aes(x=Degree, y=Height, fill= Degree)) + geom_boxplot() + theme(axis.text.x= element_text(colour="white", size= 8, angle= 90, face= "bold")) + theme(axis.text.y= element_text(colour="white", size= 12, face= "bold")) + theme(axis.title.x= element_text(size= 20, face="bold", colour="#F7B773")) + theme(axis.title.y= element_text(size= 20, face="bold", colour="#F7B773")) + theme(panel.background= element_rect(fill= "#EE8F6E")) + theme(plot.background = element_rect(fill= "#4ABDAC")) + theme(legend.background =element_rect(fill ="#EE8F6E")) + guides(fill=FALSE)
table(brodata)
table(bro)
brobro <-matrix(c(46, 74, 46, 36, 44, 64), ncol=3, byrow=TRUE)
colnames(brobro) <-c("Day Visit", "Holiday", "Never Visit")
rownames(brobro) <-c("Willing to Pay", "Not Willing to Pay")
brobro <-as.table(brobro)
brobro
mosaicplot(tab, col=TRUE, main="", cex.axis=1.2)
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=20, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobro
head(bro)
brobro
help(survey)
head(survey)
chisq.test(brobro)
source('//campus/home/home2018/b8031593/#1 Geography/GEO1018/R/R Scripts/1018 Assessment 1 GEO1018 Part 2 Data.R')
source('~/#1 Geography/GEO1018/Data Sets/1018 Assessment 1 GEO1018 Part 2 Data.R')
all <- read.csv("GEO1018_Survey2018.csv")
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background= )
library(ggplot2)
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background= )
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background=element_rect(fill="#E5BA9A"))
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(plot.background=element_rect(fill="#B3D88A"))
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#B3D88A"))
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B"))
ggplot(bris, aes(x = PropPrice, y=Income, colour="#DBD28B")) + geom_point() + geom_smooth(method=lm, se=FALSE) + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B"))
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#B3DB8A") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B"))
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B"))
ggplot(bris, aes(x = PropPrice, y=Income, colour=CrimeRate)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B"))
ggplot(bris, aes(x = PropPrice, y=Income, colour=CrimeRate)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B")) + theme(legend.background= element_rect(fill="#DBD28B))
# TASK 3:
# willingness to pay for flood defences depends on an individual's previous experience of the area.
bro <-read.csv("Broads.csv")
head(bro)
cato <-rep(c("Day Visit", "Holiday", "Never Visit"))
WillingToPay <-c(46, 74, 46)
WontPay <-c(36, 44, 64)
values <-c(WillingToPay, WontPay)
type <-c(rep("WillingToPay", 3), rep("WontPay", 3))
brodata <-data.frame(cato, values)
brobar <-ggplot(brodata, aes(cato, values))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=20, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
tab <- xtabs(Count~Visit+WillingToPay, data=bro)
cc <- c("red", "blue")
mosaicplot(tab, col=cc, main="", cex.axis=1.2)
#From the mosaic plot it is clear to see that those who visit on holiday make up the largest group that is willing to pay, whereas those who have never visited make the largest number of people who are not willing to pay.
#In my opinion the bar chart best illustrates the willingness to pay as a function of previous visit experience, the reason being that because the bars are adjacent to one another it is easier to compare them, and that y axis allows us to see the frequency each bar represents.
table(brodata)
table(bro)
brobro <-matrix(c(46, 74, 46, 36, 44, 64), ncol=3, byrow=TRUE)
colnames(brobro) <-c("Day Visit", "Holiday", "Never Visit")
rownames(brobro) <-c("Willing to Pay", "Not Willing to Pay")
brobro <-as.table(brobro)
brobro
chisq.test(brobro)
#The p-value is 0.00585
#The null hypothesis: There is no difference between the individuals willingness to pay for flood defences and their previous experience of the area.
#The alternative hypothesis: There is a difference between the individuals willingness to pay for flood defences and their previous experience of the area.
#We reject the null hypothesis as the p-value is below that of the universally accepted 0.05 threshold and therefore the diferences are significant.
#We can conclude that there is a difference between the previous experience of the area and how willing you are to pay for flood defences.
ggplot(bris, aes(x = PropPrice, y=Income, colour=CrimeRate)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B")) + theme(legend.background= element_rect(fill="#DBD28B))
# TASK 3:
# willingness to pay for flood defences depends on an individual's previous experience of the area.
bro <-read.csv("Broads.csv")
head(bro)
cato <-rep(c("Day Visit", "Holiday", "Never Visit"))
WillingToPay <-c(46, 74, 46)
WontPay <-c(36, 44, 64)
values <-c(WillingToPay, WontPay)
type <-c(rep("WillingToPay", 3), rep("WontPay", 3))
brodata <-data.frame(cato, values)
brobar <-ggplot(brodata, aes(cato, values))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=20, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
tab <- xtabs(Count~Visit+WillingToPay, data=bro)
cc <- c("red", "blue")
mosaicplot(tab, col=cc, main="", cex.axis=1.2)
#From the mosaic plot it is clear to see that those who visit on holiday make up the largest group that is willing to pay, whereas those who have never visited make the largest number of people who are not willing to pay.
#In my opinion the bar chart best illustrates the willingness to pay as a function of previous visit experience, the reason being that because the bars are adjacent to one another it is easier to compare them, and that y axis allows us to see the frequency each bar represents.
table(brodata)
table(bro)
brobro <-matrix(c(46, 74, 46, 36, 44, 64), ncol=3, byrow=TRUE)
colnames(brobro) <-c("Day Visit", "Holiday", "Never Visit")
rownames(brobro) <-c("Willing to Pay", "Not Willing to Pay")
brobro <-as.table(brobro)
brobro
chisq.test(brobro)
#The p-value is 0.00585
#The null hypothesis: There is no difference between the individuals willingness to pay for flood defences and their previous experience of the area.
#The alternative hypothesis: There is a difference between the individuals willingness to pay for flood defences and their previous experience of the area.
#We reject the null hypothesis as the p-value is below that of the universally accepted 0.05 threshold and therefore the diferences are significant.
#We can conclude that there is a difference between the previous experience of the area and how willing you are to pay for flood defences.
ggplot(bris, aes(x = PropPrice, y=Income, colour=CrimeRate)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B")) + theme(legend.background= element_rect(fill="#DBD28B"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=15, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=12, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=10, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=16, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals")
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif", colour="blue")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif", colour="lightblue")) + theme(axis.title= element_text(size=12, face="bold")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif", colour="#40b7f7")) + theme(axis.title= element_text(size=12, face="bold", colour="#ed718e")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif", colour="#40b7f7")) + theme(axis.title= element_text(size=12, face="bold", colour="#ed718e")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold", colour="#ed718e")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
ggplot(all, aes(x=Gender, y=UnitsAlcoh, fill= Gender)) + geom_boxplot() + xlab("Gender") + ylab("Units of Alcohol Consumed") + ggtitle("Do male geography students drink more alcohol that female students?") + theme(axis.text.x= greytext) + theme(axis.text.y= greytext) + theme(axis.title.x= bigtext) + theme(axis.title.x= bigtext) + theme(axis.title.y= bigtext) + theme(title= element_text(size=14, colour="darkgreen", face="bold")) +guides(fill=FALSE) + theme(plot.background= element_rect(fill="#97FACD")) + theme(panel.background= element_rect(fill="#C8F6E1"))
t.test(UnitsAlcoh ~ Gender, data= all)
bris <- read.csv("Bristol Ward Data.csv")
head(bris)
ggplot(bris, aes(x = PropPrice, y=Income)) + geom_point()
ggplot(bris, aes(x = PropPrice, y=Income, colour=CrimeRate)) + geom_point() + geom_smooth(method=lm, se=FALSE, colour="#A0707F") + theme(plot.background=element_rect(fill="#E5BA9A")) + theme(panel.background=element_rect(fill="#DBD28B")) + theme(legend.background= element_rect(fill="#DBD28B"))
bro <-read.csv("Broads.csv")
cato <-rep(c("Day Visit", "Holiday", "Never Visit"))
WillingToPay <-c(46, 74, 46)
WontPay <-c(36, 44, 64)
values <-c(WillingToPay, WontPay)
type <-c(rep("WillingToPay", 3), rep("WontPay", 3))
brodata <-data.frame(cato, values)
brobar <-ggplot(brodata, aes(cato, values))
brobar + geom_bar(stat= "identity", aes(fill= type)) + theme(axis.text=element_text(size=14, face="bold", family="serif", colour="#40b7f7")) + theme(axis.title= element_text(size=12, face="bold", colour="#ed718e")) + ggtitle("Willingness to pay dependent on individual experience") + theme(title=element_text(size=8, face="bold", colour="#ed718e")) + xlab("How often individuals visit") + ylab("Number of Individuals") + theme(panel.background = element_rect("#fffdd0")) + theme(plot.background = element_rect("#ffe39b")) + theme(legend.background = element_rect("#ffe39b"))
tab <- xtabs(Count~Visit+WillingToPay, data=bro)
cc <- c("red", "blue")
mosaicplot(tab, col=cc, main="", cex.axis=1.2)
table(brodata)
table(bro)
brobro <-matrix(c(46, 74, 46, 36, 44, 64), ncol=3, byrow=TRUE)
colnames(brobro) <-c("Day Visit", "Holiday", "Never Visit")
rownames(brobro) <-c("Willing to Pay", "Not Willing to Pay")
brobro <-as.table(brobro)
brobro
chisq.test(brobro)
brobro
source('~/#1 Geography/GEO1018/Data Sets/1018 Assessment 1 GEO1018 Part 2 Data.R')
source('~/#1 Geography/GEO1018/Data Sets/1018 Assessment 1 GEO1018 Part 2 Data.R')
all <- read.csv("GEO1018_Survey2018.csv")
source('~/#1 Geography/GEO1018/Data Sets/1018 Assessment 1 GEO1018 Part 2 Data.R')
all <- read.csv("GEO1018_Survey2018.csv")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
flights
install.packages("nycflights13")
library(nycflights13)
flights
#To look at the dataset we can use the view() function
view(flights)
glimpse(flights)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(ggplot2)
library(knitr)
glimpse(flights)
library(nycflights13)
glimpse(flights)
airlines
kable(airlines)
airlines
kable(airlines)
airlines
kable(airlines)
airlines$name
glimpse(airports)
a=airports$faa
b=airports$alt
c=airports$tz
d=(a,b,c)
d=a,b,c
d(a,b,c)
?flights
#Attempt to combine the variables together so only these variables are displayed.
(a b c)
d<-(a,b,c)
d<-(a b c)
alaska_flights <- flights %>%
filter(carrier=="AS")
#Create a scatterplot from the filtered data.
ggplot(data=alaska_flights, mapping=aes(x=dep_delay, y arr_delay)) +
geom_point()
#Create a scatterplot from the filtered data.
ggplot(data=alaska_flights, mapping=aes(x=dep_delay, y=arr_delay)) +
geom_point()
glimpse(weather)
glimpse(flight)
glimpse(flights)
glimpse(alaska_flights)
glimpse(weather)
glimpse(alaska_flights)
glimpse(alaska_flights)
ggplot(data=alaska_flights, mapping=aes(x=arr_delay, y=air_time)) +
geom_point()
ggplot(data=alaska_flights, mapping=aes(x=dep_delay, y=arr_delay)) +
geom_point(alpha=0.2)
ggplot(data=alaska_flights, mapping=aes(x=arr_delay, y=dep_delay)) +
geom_jitter(width=30, height=30)
ggplot(data=alaska_flights, mapping=aes(x=arr_delay, y=dep_delay)) +
geom_jitter(width=50, height=30)
ggplot(data=alaska_flights, mapping=aes(x=arr_delay, y=dep_delay)) +
geom_jitter(width=80, height=30)
ggplot(data=alaska_flights, mapping=aes(x=arr_delay, y=dep_delay)) +
geom_jitter(width=100, height=30)
#We will the use the weather data frame to achieve this.
early_january_weather <-weather%>%
filter(origin=="EWR" & month==1 & day<=15)
View(flights)
ggplot(data=early_january_weather, mapping=aes(x=time_hour, y=temp)) +
geom_line()
ggplot(data=early_january_weather, mapping=aes(x=time_hour, y=temp)) +
geom_line()
#Plot a time series of a variable other than temp for JFK Airport.
view(flights)
#Plot a time series of a variable other than temp for JFK Airport.
View(flights)
#Plot a time series of a variable other than temp for JFK Airport.
View(weather)
early_jan_weather_JFK <-weather%>%
filter(origin=="JFK", month==1, day<=15)
#Plot the newly filtered dataset.
ggplot(data=early_jan_weather_JFK, mapping=aes(x=time_hour, y=pressure)) +
geom_point()
#Plot the newly filtered dataset.
ggplot(data=early_jan_weather_JFK, mapping=aes(x=time_hour, y=pressure)) +
geom_line()
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram()
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(colour="white")
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(colour="white", fill="steelblue")
colours()
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(bins=10, colour="white", fill="steelblue")
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(binwidth=5, colour="white", fill="steelblue") +
facet_wrap(~ month)
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(colour="white", fill="steelblue") +
facet(~ month, nrow=4)
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(colour="white", fill="steelblue") +
facet_wrap(~ month, nrow=4)
ggplot(data=weather, mapping=aes(x=temp)) +
geom_histogram(binwidth=5, colour="white", fill="steelblue") +
facet_wrap(~ month, nrow=4)
ggplot(data=weather, mapping=aes(x=month, y=temp)) +
geom_boxplot()
ggplot(data=weather, mapping=aes(x=factor(month), y=temp)) +
geom_boxplot()
ggplot(data=weather, mapping=aes(x=factor(month), y=temp)) +
geom_boxplot()
?tibble
fruits<- tibble( fruit=c("apple", "apple", "orange", "apple", "orange"))
fruits_counted<-tibble(fruit=c("apple", "orange"), number=c(3,2))
ggplot(data=fruits, mapping=aes(x=fruits)) +
geom_bar()
fruits<- tibble( fruit=c("apple", "apple", "orange", "apple", "orange"))
fruits_counted<-tibble(fruit=c("apple", "orange"), number=c(3,2))
ggplot(data=fruits, mapping=aes(x=fruits)) +
geom_bar()
ggplot(data=fruits, mapping=aes(x=fruit)) +
geom_bar()
ggplot(data=fruits_counted, mapping=aes(x=fruit, y=number)) + geom_col()
ggplot(data= flights, mapping=aes(x=carrier)) +
geom_bar()
ggplot(data=flights, mapping=aes(x=carrier, fill=origin)) +
geom_bar()
ggplot(data=flights, mapping=aes(x=carrier, fill=origin)) +
geom_bar(position="dodge")
ggplot(data= flights, mapping=aes(x=carrier, fill=origin)) +
geom_bar(position= position_dodge(preserve="single"))
ggplot(data=flights, mapping=aes(x=carrier)) +
geom_bar() +
facet_wrap(~origin, ncol=1)
btv_sea_flights_fall<-flights %>%
filter(origin=="JFK" & (dest=="BTV"|dest=="SEA") & month>=10)
View(btv_sea_flights_fall)
not_BTV_SEA<-flights %>%
filter(!(dest=="BTV"|"SEA"))
View(not_BTV_SEA)
not_BTV_SEA<-flights %>%
filter(!(dest=="BTV"|dest=="SEA"))
View(not_BTV_SEA)
many_airports<-flights %>%
filter(dest == "SEA" | dest == "SFO" | dest == "PDX" |
dest == "BTV" | dest == "BDL")
View(many_airports)
library(cdtRprogramming)
install.packages(cdtRprogramming)
install.packages("cdtRprogramming")
library(cdtRprogramming)
install.packages("cdtRprogramming")
library(ProjectTemplate)
set.seed(123)
sample()
sample(3)
sample(3)
set.seed(123)
sample(3)
sample(3)
sample(3)
data(mtcars)
force(mtcars)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(mtcars))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
train_ind <- sample(seq_len(ncol(mtcars)), size = smp_size)
## 75% of the sample size
smp_size <- floor(0.75 * ncol(mtcars))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(ncol(mtcars)), size = smp_size)
train <- mtcars[train_ind, ]
data(mtcars)
## 75% of the sample size
smp_size <- floor(0.75 * ncol(mtcars))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(ncol(mtcars)), size = smp_size)
train <- mtcars[,train_ind]
test <- mtcars[,-train_ind]
View(test)
View(mtcars)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(mtcars))
train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size)
train <- mtcars[train_ind,]
test <- mtcars[-train_ind,]
View(test)
View(train)
View(test)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x,y)) + geom_point()
# We can begin to run random models to find the one that best elucidates the relationship between the datasets
models<- tibble(
a1=runif(250, -20, 40),
a2=runif(250, -5, 5)
)
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intrcept=a1, slope=a2), data=models, alpha=1/4) + geom_point()
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intrcept=a1, slope=a2), data=models, alpha=1/4) + geom_point()
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intrcept=a1, slope=a2), data=models, alpha=1/4) +
geom_point()
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intercept=a1, slope=a2), data=models, alpha=1/4) +
geom_point()
# Determine the best model for evaluation
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
sim1 <- sim1 %>%
add_residuals(sim1_mod)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point() #The residuals apper to be randomly
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intercept=a1, slope=a2), data=models, alpha=1/4) +
geom_point() #This model has produced 250 models on this plot, but many are very poor, therefore we need to find a way to quantify the distance between the data and a model.
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point() #The residuals apper to be randomly
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
require(RColorBrewer)
require(rgl)
# load csv file exported by SHERPA:
sherpa.tab <- read.csv("EFA/Sellaphora with RATS with contour optimization.new rectangularity.csv", sep=";", dec=",")
wd()
getwd()
cwd("~/DissData/R_scripts_Sellaphora/RScriptsSellaphora")
setwd(~/DissData/R_scripts_Sellaphora/RScriptsSellaphora)
setwd(~\DissData\R_scripts_Sellaphora\RScriptsSellaphora)
setwd("~/DissData/R_scripts_Sellaphora/RScriptsSellaphora")
getwd()
require(RColorBrewer)
require(rgl)
# load csv file exported by SHERPA:
sherpa.tab <- read.csv("EFA/Sellaphora with RATS with contour optimization.new rectangularity.csv", sep=";", dec=",")
sherpa.tab <- sherpa.tab[-344,] # this is a small centric valve, not a Sellaphora
im.map <- sherpa.tab[,c("Source.Image","Contour.Image")]
src.im <- regmatches(im.map[[1]], regexpr("\\d+ca", im.map[[1]], perl=T))
src.im <- sub("0+", "", src.im)
src.im <- sub("ca$", "", src.im)
co.im <- regmatches(im.map[[2]], regexpr("optimization\\.\\d+", im.map[[2]], perl=T))
co.im <- sub("optimization", "sellaphora", co.im)
names(src.im) <- co.im
# read demes table:
demes.tab <- read.table("sellaphora-demes.txt", sep="\t", header=T, row.names=1)
sherpa.tab$Deme <- factor(demes.tab[src.im,1])
sherpa.tab$DemeNr <- factor(demes.tab[src.im,2])
sherpa.tab <- sherpa.tab[sherpa.tab$Ranking.Index < 3,]
demes <- c("rectangular", "capitate", "small", "lanceolate", "obese", "neat")
# setup palette for plotting:
pal <- brewer.pal(6, "Dark2")
# re-scale units to µms:
# make sure you only exeute the following three lines
# once!
scalefact <- 0.55
sherpa.tab$Width <- sherpa.tab$Width * scalefact
sherpa.tab$Height <- sherpa.tab$Height * scalefact
# plot:
par(mfrow=c(2,2))
# Fig 5-6:
boxplot(Width ~ Deme, data=sherpa.tab, col=pal[1:6], main="Fig. 5 (length by deme)")
boxplot(Height ~ Deme, data=sherpa.tab, col=pal[1:6], main="Fig. 6 (width by deme)")
# Fig. 10:
plot(sherpa.tab$Width, sherpa.tab$Height, col=pal[sherpa.tab$Deme], pch=16, xlab="length (µm)", ylab="width (µm)", main="Fig. 10")
legend("bottomright", pch=16, col=pal[1:6], legend=levels(sherpa.tab$Deme))
# Fig. 14:
plot(sherpa.tab$Rectangularity, sherpa.tab$Height, col=pal[sherpa.tab$Deme], pch=16, ylab="width (µm)", xlab="rectangularity", main="Fig. 14")
legend("topleft", pch=16, col=pal[1:6], legend=levels(sherpa.tab$Deme))
###############################################################################
# PCA of EFDs (Fig. 15):
source("R/SHERPA-2-R.R")
indir <- "EFA"
efds <- load.efds(indir, max.rank=2)
efds <- efds[-344,]  # remove centric valve
efd.pc <- prcomp(efds, center=T, scale=F)
windows()
plot(efd.pc$x[, c(1,2)], pch=18, col=pal[sherpa.tab$DemeNr])
legend("topleft", legend=demes, pt.bg=pal, cex=1, pch=rep(22,6), bty="n")
# PCs 1-3:
# rectangular and capitate are quite well separated on PC3
plot3d(efd.pc$x[,1:3], col=pal[sherpa.tab$DemeNr], size=10)
